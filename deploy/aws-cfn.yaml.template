AWSTemplateFormatVersion: 2010-09-09
Description: "Hubot cluster"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2 Configuration
        Parameters:
          - InstanceType
          - KeyName

Parameters:
  InstanceType:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMI: ami-71ef560b
    us-east-2:
      AMI: ami-1b8ca37e
    us-west-1:
      AMI: ami-e5cdf385
    us-west-2:
      AMI: ami-a64d9ade
    eu-west-1:
      AMI: ami-014ae578
    eu-west-2:
      AMI: ami-4f8d912b
    eu-central-1:
      AMI: ami-4255d32d
    ap-northeast-1:
      AMI: ami-3405af52
    ap-northeast-2:
      AMI: ami-502c883e
    ap-southeast-1:
      AMI: ami-134e0670
    ap-southeast-2:
      AMI: ami-2ab95148
    ca-central-1:
      AMI: ami-c802baac

  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public1:
      CIDR: 10.0.10.0/24
    Public2:
      CIDR: 10.0.20.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - VPC
          - CIDR
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - Public1
          - CIDR
      Tags:
        - Key: Name
          Value: "Public Subnet 1"
        - Key: Application
          Value: !Ref AWS::StackName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock:
        Fn::FindInMap:
          - SubnetConfig
          - Public2
          - CIDR
      Tags:
        - Key: Name
          Value: "Public Subnet 2"
        - Key: Application
          Value: !Ref AWS::StackName

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - VPC
      - AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public
        - Key: Application
          Value: !Ref AWS::StackName

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for EC2 instances
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: InstanceSecGrp
        - Key: Application
          Value: !Ref AWS::StackName

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole
      Path: /

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
      AutoScalingReplacingUpdate:
        WillReplace: true
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref LaunchConfiguration
      DesiredCapacity: 1
      MaxSize: 1
      MinSize: 0
      MetricsCollection:
        - Granularity: 1Minute
      HealthCheckGracePeriod: 120
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      AssociatePublicIpAddress: true
      UserData:
        "Fn::Base64": !Sub |
            #!/bin/bash
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
            /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
      SecurityGroups:
        - !Ref SecurityGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/ecs/ecs.config":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                  ECS_CLUSTER=${Cluster}
                  ECS_AVAILABLE_LOGGING_DRIVERS=["json-file","awslogs"]
                  ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=5m
                  ECS_IMAGE_CLEANUP_INTERVAL=10m
                  ECS_IMAGE_MINIMUM_CLEANUP_AGE=15m
                  ECS_NUM_IMAGES_DELETE_PER_CYCLE=5
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  Cluster:
    Type: AWS::ECS::Cluster

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: deny-all
          PolicyDocument:
            Statement:
              - Effect: Deny
                Action: "*"
                Resource: "*"
      Path: /

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1

  Task:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      ContainerDefinitions: 
        - Name: hubot
          Image: dockercloud/hello-world
          Environment:
            - Name: HUBOT_SLACK_TOKEN
              Value: @token
            - Name: HUBOT_SLACK_TEAM
              Value: @team
            - Name: HUBOT_SLACK_BOTNAME
              Value: @hubot
          Cpu: 50
          MemoryReservation: 64
          Memory: 256
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
          Essential: true
      Family: !Ref AWS::StackName
      TaskRoleArn: !Ref TaskRole
